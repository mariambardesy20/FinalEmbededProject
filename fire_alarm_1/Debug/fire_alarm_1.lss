
fire_alarm_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000356  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000356  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fbe  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000923  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000831  00000000  00000000  00001e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00002648  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dc  00000000  00000000  000027f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000685  00000000  00000000  00002cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003359  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 18 01 	call	0x230	; 0x230 <main>
  7a:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_clearDisplay>:
#include<avr/io.h>
#include"macros.h"
#include "lcd_driver.h"
void LCD_clearDisplay(void){

	LCD_DATA_PORT =0X00;
  82:	1b ba       	out	0x1b, r1	; 27
	setbit(LCD_DATA_PORT,LCD_DB0_PIN);
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	81 60       	ori	r24, 0x01	; 1
  88:	8b bb       	out	0x1b, r24	; 27
	LCD_CONTROL_PORT &= ~(1<<LCD_RS_PIN);
  8a:	88 b3       	in	r24, 0x18	; 24
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	88 bb       	out	0x18, r24	; 24
	LCD_CONTROL_PORT &= ~(1<<LCD_RW_PIN);
  90:	88 b3       	in	r24, 0x18	; 24
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	88 bb       	out	0x18, r24	; 24
  96:	08 95       	ret

00000098 <LCD_enable>:
}
void LCD_enable(void){

	setbit(LCD_CONTROL_PORT,LCD_E_PIN);
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	88 60       	ori	r24, 0x08	; 8
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	08 95       	ret

000000a0 <LCD_disable>:
}
void LCD_disable(void){

	clearbit(LCD_CONTROL_PORT,LCD_E_PIN);
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	87 7f       	andi	r24, 0xF7	; 247
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	08 95       	ret

000000a8 <LCD_writeCommand>:
}
void LCD_writeCommand(Unit8 hex){
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	clearbit(LCD_CONTROL_PORT,LCD_RW_PIN);
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	8b 7f       	andi	r24, 0xFB	; 251
  b0:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	8f e9       	ldi	r24, 0x9F	; 159
  b4:	9f e0       	ldi	r25, 0x0F	; 15
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_writeCommand+0xe>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_writeCommand+0x14>
  bc:	00 00       	nop
	_delay_ms(1);
	LCD_enable();
  be:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_enable>
  c2:	8f e9       	ldi	r24, 0x9F	; 159
  c4:	9f e0       	ldi	r25, 0x0F	; 15
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCD_writeCommand+0x1e>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <LCD_writeCommand+0x24>
  cc:	00 00       	nop
	_delay_ms(1);
    LCD_DATA_PORT= hex;
  ce:	cb bb       	out	0x1b, r28	; 27
	LCD_disable();
  d0:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_disable>

}
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <LCD_init>:
void LCD_init(void){
	LCD_DATA_DDR=0x0F;
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	8a bb       	out	0x1a, r24	; 26
	LCD_CONTROL_DDR=0xFF;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	87 bb       	out	0x17, r24	; 23
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	83 ef       	ldi	r24, 0xF3	; 243
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <LCD_init+0xe>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_init+0x18>
  f0:	00 00       	nop
	_delay_ms(40);
	LCD_writeCommand(0x20);
  f2:	80 e2       	ldi	r24, 0x20	; 32
  f4:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
	LCD_writeCommand(0x20);
  f8:	80 e2       	ldi	r24, 0x20	; 32
  fa:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
	LCD_writeCommand(0x80);
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_init+0x30>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_init+0x36>
 10e:	00 00       	nop
	_delay_ms(1);
	LCD_writeCommand(0x00);
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
	LCD_writeCommand(0xF0);
 116:	80 ef       	ldi	r24, 0xF0	; 240
 118:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
 11c:	8f e9       	ldi	r24, 0x9F	; 159
 11e:	9f e0       	ldi	r25, 0x0F	; 15
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_init+0x48>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_init+0x4e>
 126:	00 00       	nop
	_delay_ms(1);
	LCD_writeCommand(0x00);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
	LCD_writeCommand(0x10);
 12e:	80 e1       	ldi	r24, 0x10	; 16
 130:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
 134:	8f e3       	ldi	r24, 0x3F	; 63
 136:	9f e1       	ldi	r25, 0x1F	; 31
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_init+0x60>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_init+0x66>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <LCD_writeChar>:
	_delay_ms(2);
}
void LCD_writeChar(Unit8 c){
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
	clearbit(LCD_CONTROL_PORT,LCD_RW_PIN);
 146:	88 b3       	in	r24, 0x18	; 24
 148:	8b 7f       	andi	r24, 0xFB	; 251
 14a:	88 bb       	out	0x18, r24	; 24
	setbit(LCD_CONTROL_PORT,LCD_RS_PIN);
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	88 bb       	out	0x18, r24	; 24
	LCD_writeCommand(c);
 152:	8c 2f       	mov	r24, r28
 154:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
 158:	8f e9       	ldi	r24, 0x9F	; 159
 15a:	9f e0       	ldi	r25, 0x0F	; 15
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_writeChar+0x1a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_writeChar+0x20>
 162:	00 00       	nop
	_delay_ms(1);
	LCD_enable();
 164:	0e 94 4c 00 	call	0x98	; 0x98 <LCD_enable>
 168:	8f e9       	ldi	r24, 0x9F	; 159
 16a:	9f e0       	ldi	r25, 0x0F	; 15
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_writeChar+0x2a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_writeChar+0x30>
 172:	00 00       	nop
	_delay_ms(1);
	LCD_DATA_PORT=((c<<4)&0xF0);
 174:	20 e1       	ldi	r18, 0x10	; 16
 176:	c2 9f       	mul	r28, r18
 178:	c0 01       	movw	r24, r0
 17a:	11 24       	eor	r1, r1
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	8f e9       	ldi	r24, 0x9F	; 159
 180:	9f e0       	ldi	r25, 0x0F	; 15
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_writeChar+0x40>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_writeChar+0x46>
 188:	00 00       	nop
	_delay_ms(1);
	LCD_disable();
 18a:	0e 94 50 00 	call	0xa0	; 0xa0 <LCD_disable>
}
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <LCD_SendString>:
void LCD_SendString(Sint8* string){
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	8c 01       	movw	r16, r24
	Unit8 i = 0;
 19a:	c0 e0       	ldi	r28, 0x00	; 0
	while (string[i] != '\0')
 19c:	03 c0       	rjmp	.+6      	; 0x1a4 <LCD_SendString+0x12>
	{
		LCD_writeChar(string[i]);
 19e:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_writeChar>
		i++;
 1a2:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(1);
	LCD_disable();
}
void LCD_SendString(Sint8* string){
	Unit8 i = 0;
	while (string[i] != '\0')
 1a4:	f8 01       	movw	r30, r16
 1a6:	ec 0f       	add	r30, r28
 1a8:	f1 1d       	adc	r31, r1
 1aa:	80 81       	ld	r24, Z
 1ac:	81 11       	cpse	r24, r1
 1ae:	f7 cf       	rjmp	.-18     	; 0x19e <LCD_SendString+0xc>
	{
		LCD_writeChar(string[i]);
		i++;
	}
}
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	08 95       	ret

000001b8 <LCD_SendStringPos>:
void LCD_SendStringPos(Sint8* string,Unit8 line ,Unit8 pos){
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ec 01       	movw	r28, r24
 1c0:	14 2f       	mov	r17, r20
	switch (line)
 1c2:	61 30       	cpi	r22, 0x01	; 1
 1c4:	19 f0       	breq	.+6      	; 0x1cc <LCD_SendStringPos+0x14>
 1c6:	62 30       	cpi	r22, 0x02	; 2
 1c8:	69 f0       	breq	.+26     	; 0x1e4 <LCD_SendStringPos+0x2c>
 1ca:	17 c0       	rjmp	.+46     	; 0x1fa <LCD_SendStringPos+0x42>
	{
		case 1:
		LCD_writeCommand((0x80 | (pos&0x0F))&0xF0);
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
		LCD_writeCommand((0x80 | (pos&0x0F))<<4);
 1d2:	81 2f       	mov	r24, r17
 1d4:	82 95       	swap	r24
 1d6:	80 7f       	andi	r24, 0xF0	; 240
 1d8:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
		LCD_SendString(string);
 1dc:	ce 01       	movw	r24, r28
 1de:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_SendString>
		break;
 1e2:	0b c0       	rjmp	.+22     	; 0x1fa <LCD_SendStringPos+0x42>
		case 2:
		LCD_writeCommand((0xC0 | (pos&0x0F))&0xF0);
 1e4:	80 ec       	ldi	r24, 0xC0	; 192
 1e6:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
		LCD_writeCommand((0xC0 | (pos&0x0F))<<4);
 1ea:	81 2f       	mov	r24, r17
 1ec:	82 95       	swap	r24
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD_writeCommand>
		LCD_SendString(string);
 1f4:	ce 01       	movw	r24, r28
 1f6:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_SendString>
		break;
	}
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	08 95       	ret

00000202 <ServoAngle>:
		
    }

}
void ServoAngle(unsigned short angle){
OCR1A=(((maxCount-minCount)*(angle-minAng))/(maxAng-minAng))+minCount-1;
 202:	4a ef       	ldi	r20, 0xFA	; 250
 204:	48 9f       	mul	r20, r24
 206:	90 01       	movw	r18, r0
 208:	49 9f       	mul	r20, r25
 20a:	30 0d       	add	r19, r0
 20c:	11 24       	eor	r1, r1
 20e:	a3 e8       	ldi	r26, 0x83	; 131
 210:	bd e2       	ldi	r27, 0x2D	; 45
 212:	0e 94 9a 01 	call	0x334	; 0x334 <__umulhisi3>
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	92 95       	swap	r25
 21c:	82 95       	swap	r24
 21e:	8f 70       	andi	r24, 0x0F	; 15
 220:	89 27       	eor	r24, r25
 222:	9f 70       	andi	r25, 0x0F	; 15
 224:	89 27       	eor	r24, r25
 226:	87 50       	subi	r24, 0x07	; 7
 228:	9f 4f       	sbci	r25, 0xFF	; 255
 22a:	9b bd       	out	0x2b, r25	; 43
 22c:	8a bd       	out	0x2a, r24	; 42
 22e:	08 95       	ret

00000230 <main>:
void ServoAngle(unsigned short angle);

int main(void)
{
   
	LCD_init();
 230:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_init>
	SPI_init(Slave);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 6f 01 	call	0x2de	; 0x2de <SPI_init>
	UART_init();
 23a:	0e 94 8c 01 	call	0x318	; 0x318 <UART_init>
	DDRC|=((1<<4)|(1<<3));
 23e:	84 b3       	in	r24, 0x14	; 20
 240:	88 61       	ori	r24, 0x18	; 24
 242:	84 bb       	out	0x14, r24	; 20
	DDRD|=(1<<5);
 244:	81 b3       	in	r24, 0x11	; 17
 246:	80 62       	ori	r24, 0x20	; 32
 248:	81 bb       	out	0x11, r24	; 17
	ICR1=4999;
 24a:	87 e8       	ldi	r24, 0x87	; 135
 24c:	93 e1       	ldi	r25, 0x13	; 19
 24e:	97 bd       	out	0x27, r25	; 39
 250:	86 bd       	out	0x26, r24	; 38
	TCCR1A|=((1<<COM1A1)|(1<<WGM11));
 252:	8f b5       	in	r24, 0x2f	; 47
 254:	82 68       	ori	r24, 0x82	; 130
 256:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=((1<<WGM12)|(1<<CS11)|(1<<CS10)|(1<<WGM13));
 258:	8e b5       	in	r24, 0x2e	; 46
 25a:	8b 61       	ori	r24, 0x1B	; 27
 25c:	8e bd       	out	0x2e, r24	; 46
	OCR1A=50;
 25e:	82 e3       	ldi	r24, 0x32	; 50
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	9b bd       	out	0x2b, r25	; 43
 264:	8a bd       	out	0x2a, r24	; 42
	  
    while (1) 
    {
	    if(SPI_Receive()==0xAA){
 266:	0e 94 88 01 	call	0x310	; 0x310 <SPI_Receive>
 26a:	8a 3a       	cpi	r24, 0xAA	; 170
 26c:	79 f4       	brne	.+30     	; 0x28c <main+0x5c>
		 LCD_SendStringPos("fire!!",1,5);
 26e:	45 e0       	ldi	r20, 0x05	; 5
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	80 e6       	ldi	r24, 0x60	; 96
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_SendStringPos>
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	89 e6       	ldi	r24, 0x69	; 105
 27e:	98 e1       	ldi	r25, 0x18	; 24
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x50>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x5a>
 28a:	00 00       	nop
		 	_delay_ms(500);
	    }
	 if(UART_RXChar()=='f'){
 28c:	0e 94 96 01 	call	0x32c	; 0x32c <UART_RXChar>
 290:	86 36       	cpi	r24, 0x66	; 102
 292:	91 05       	cpc	r25, r1
 294:	71 f4       	brne	.+28     	; 0x2b2 <main+0x82>
	  	ServoAngle(90);
 296:	8a e5       	ldi	r24, 0x5A	; 90
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 01 01 	call	0x202	; 0x202 <ServoAngle>
 29e:	2f ef       	ldi	r18, 0xFF	; 255
 2a0:	89 e6       	ldi	r24, 0x69	; 105
 2a2:	98 e1       	ldi	r25, 0x18	; 24
 2a4:	21 50       	subi	r18, 0x01	; 1
 2a6:	80 40       	sbci	r24, 0x00	; 0
 2a8:	90 40       	sbci	r25, 0x00	; 0
 2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0x74>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0x7e>
 2ae:	00 00       	nop
 2b0:	0a c0       	rjmp	.+20     	; 0x2c6 <main+0x96>
	  	_delay_ms(500);
	 }
	 else {
   	 ServoAngle(0);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 01 01 	call	0x202	; 0x202 <ServoAngle>
	 LCD_SendStringPos("normal",1,5);}
 2ba:	45 e0       	ldi	r20, 0x05	; 5
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	87 e6       	ldi	r24, 0x67	; 103
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_SendStringPos>
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	89 e6       	ldi	r24, 0x69	; 105
 2ca:	98 e1       	ldi	r25, 0x18	; 24
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0x9c>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0xa6>
 2d6:	00 00       	nop
	 _delay_ms(500);
	LCD_clearDisplay();
 2d8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_clearDisplay>
		
    }
 2dc:	c4 cf       	rjmp	.-120    	; 0x266 <main+0x36>

000002de <SPI_init>:
unsigned char SPI_TxRx(unsigned char data){
	SPDR=data;
	while(!((SPSR>>SPIF)&1));
	return SPDR;
	
}char SPI_Receive()
 2de:	88 23       	and	r24, r24
 2e0:	19 f0       	breq	.+6      	; 0x2e8 <SPI_init+0xa>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	59 f0       	breq	.+22     	; 0x2fc <SPI_init+0x1e>
 2e6:	08 95       	ret
 2e8:	87 b3       	in	r24, 0x17	; 23
 2ea:	80 6b       	ori	r24, 0xB0	; 176
 2ec:	87 bb       	out	0x17, r24	; 23
 2ee:	87 b3       	in	r24, 0x17	; 23
 2f0:	8f 7b       	andi	r24, 0xBF	; 191
 2f2:	87 bb       	out	0x17, r24	; 23
 2f4:	8d b1       	in	r24, 0x0d	; 13
 2f6:	80 65       	ori	r24, 0x50	; 80
 2f8:	8d b9       	out	0x0d, r24	; 13
 2fa:	08 95       	ret
 2fc:	87 b3       	in	r24, 0x17	; 23
 2fe:	80 64       	ori	r24, 0x40	; 64
 300:	87 bb       	out	0x17, r24	; 23
 302:	87 b3       	in	r24, 0x17	; 23
 304:	8f 74       	andi	r24, 0x4F	; 79
 306:	87 bb       	out	0x17, r24	; 23
 308:	8d b1       	in	r24, 0x0d	; 13
 30a:	80 64       	ori	r24, 0x40	; 64
 30c:	8d b9       	out	0x0d, r24	; 13
 30e:	08 95       	ret

00000310 <SPI_Receive>:
{
	while(!(SPSR & (1<<SPIF)));
 310:	77 9b       	sbis	0x0e, 7	; 14
 312:	fe cf       	rjmp	.-4      	; 0x310 <SPI_Receive>
	return(SPDR);
 314:	8f b1       	in	r24, 0x0f	; 15
}
 316:	08 95       	ret

00000318 <UART_init>:
	UBRRL =MyUBRR;
	UBRRH =(MyUBRR>>8);
	}
void UART_TXChar(char data){
	while(!((UCSRA>>UDRE)&1));
	UDR=data;
 318:	8a b1       	in	r24, 0x0a	; 10
 31a:	88 61       	ori	r24, 0x18	; 24
 31c:	8a b9       	out	0x0a, r24	; 10
 31e:	80 b5       	in	r24, 0x20	; 32
 320:	86 68       	ori	r24, 0x86	; 134
 322:	80 bd       	out	0x20, r24	; 32
 324:	87 e6       	ldi	r24, 0x67	; 103
 326:	89 b9       	out	0x09, r24	; 9
 328:	10 bc       	out	0x20, r1	; 32
 32a:	08 95       	ret

0000032c <UART_RXChar>:
}
char UART_RXChar(){
	while(!((UCSRA>>RXC)&1));
 32c:	5f 9b       	sbis	0x0b, 7	; 11
 32e:	fe cf       	rjmp	.-4      	; 0x32c <UART_RXChar>
	return UDR;
 330:	8c b1       	in	r24, 0x0c	; 12
}
 332:	08 95       	ret

00000334 <__umulhisi3>:
 334:	a2 9f       	mul	r26, r18
 336:	b0 01       	movw	r22, r0
 338:	b3 9f       	mul	r27, r19
 33a:	c0 01       	movw	r24, r0
 33c:	a3 9f       	mul	r26, r19
 33e:	70 0d       	add	r23, r0
 340:	81 1d       	adc	r24, r1
 342:	11 24       	eor	r1, r1
 344:	91 1d       	adc	r25, r1
 346:	b2 9f       	mul	r27, r18
 348:	70 0d       	add	r23, r0
 34a:	81 1d       	adc	r24, r1
 34c:	11 24       	eor	r1, r1
 34e:	91 1d       	adc	r25, r1
 350:	08 95       	ret

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
